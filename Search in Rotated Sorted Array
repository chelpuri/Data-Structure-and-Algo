class Solution {
    public int search(int[] nums, int target) {
        int n=nums.length;
        int l=0,r=n-1;
        if(n==1)
        {
            if(target==nums[0])
               return 0;
            else
               return -1;
        }
        int minIdx=getMinIndx(nums,n);
        if(minIdx==0)
        {
            return bSearch(nums,target,0,n-1);
        }
        else if(target>=nums[0])
        {
            return bSearch(nums,target,0,minIdx-1);
        }
        else
        {
            return bSearch(nums,target,minIdx,n-1);
        }
    }
    public int getMinIndx(int[] A,int n)
    {
        if(A[n-1]>A[0])
            return 0;
        else
        {
            int l=0,r=n-1;
            while(l<=r)
            {
                int mid=(l+r)/2;
                if(A[mid]>A[mid+1])
                    return mid+1;
                if(A[mid-1]>A[mid])
                    return mid;
                if(A[mid]>A[0])
                    l=mid+1;
                else
                    r=mid-1;
            }
            return -1;
        }
    }
    public int bSearch(int[] A,int B,int l,int r)
    {
        while(l<=r)
        {
            int mid=(l+r)/2;
            if(A[mid]==B)
            {
                return mid;
            }
            else if(A[mid]>B)
            {
                r=mid-1;
            }
            else
            {
                l=mid+1;
            }
        }
        return -1;
    }
    
}
