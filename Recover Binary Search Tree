/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<Integer> recoverTree(TreeNode A) {
        Stack<TreeNode> st=new Stack<TreeNode>();
        ArrayList<Integer> ans=new ArrayList<Integer>();
     
        while(!st.isEmpty() || A!=null)
        {
            if(A!=null)
            {
                st.push(A);
                A=A.left;
            }
            else
            {
                TreeNode temp=st.pop();
                ans.add(temp.val);
                A=temp.right;
            }
        }
        ArrayList<Integer> x=new ArrayList<Integer>();
        int f=-1,s=-1,t=-1;
        for(int i=0;i<ans.size()-1;i++)
        {
           if(ans.get(i)>ans.get(i+1))
           {
               if(f==-1){
                 f=ans.get(i);
                 s=ans.get(i+1);
               }
               else{
                   t=ans.get(i+1);
               }
               
           }
        }
        if(t!=-1)
        {
            x.add(t);
            x.add(f);
        }
        else
        {
            x.add(s);
            x.add(f);
        }
        return x;

    }
}
